var readline=require("readline"),util=require("util"),events=require("events");mongoose=require("mongoose"),CryptoJS=require("crypto-js");var eventEmitter=new events.EventEmitter;var User=require("../models/user").getModel(),Logger=require("../logging").logger(),configDB=require("../config/database.js");var rl=readline.createInterface({input:process.stdin,output:process.stdout});var currentAuthErrors=0,MAX_AUTH_ERRORS=3,MIN_USERNAME_CHARS=3;var addUser=function(callback){util.puts("\n# --------- Benutzer anlegen -------------- #");var user={};var _getLastName=function(){rl.question("Nachname: ",function(lastName){if(lastName.length===0){util.puts("Bitte geben Sie den Nachnamen ein (Eingabe darf nicht leer sein).");return _getLastName()}user.lastName=lastName;setUserPassword(user,function(user){registerUser(user,callback)})})};var _getFirstName=function(){rl.question("Vorname: ",function(firstName){if(firstName.length===0){util.puts("Bitte geben Sie den Vornamen an (Eingabe darf nicht leer sein).");return _getFirstName()}user.firstName=firstName;_getLastName()})};var _getUsername=function(){rl.question("Username: ",function(username){if(username.length===0||username.length<MIN_USERNAME_CHARS){util.puts("Bitte einen gültigen Benutzernamen angeben (Mindestens "+MIN_USERNAME_CHARS+" Zeichen).");return _getUsername()}try{User.findOne({username:username},function(err,userExists){if(err){console.log("error");throw new Error("Fehler beim Prüfen des Benutzers aufgetreten")}else if(userExists){util.puts(util.format("Der Benutzername %s ist bereits vergeben. Bitte geben Sie einen anderen Benutzernamen an.",username));return _getUsername()}user.username=username;_getFirstName()})}catch(err){throw new Error("Fehler beim der Überpüfung der Benutzer aufgetreten")}})};util.puts("Bitte geben Sie die Benutzerdaten des neuen Benutzers an.");_getUsername()};var authenticate=function(onAuthSuccess,onAuthFail){var userHash="c56f8dca6714b13a39675227f39a84e1666e0ad3a7ba4bbb674413d589a1b506057158ff8a1f706590aaa43022578138eef93d4afeeb52c0b6f58c9fe1a6ee08",passordHash="8f6c44c5ab410d9ea7b018346928870cf7f2f219d3a02cb3749e231b8c94be42e42e5bee8558ee7ed7588cdeb39b69baa806331c44417454f05c8c3aa5b7a239";var _getAuthUser=function(){rl.question("Benutzer: ",function(user){_getAuthPassword(user)})};var _getAuthPassword=function(user){rl.question("Passwort: ",function(password){if(_checkAuthentication(user,password)){onAuthSuccess()}else{currentAuthErrors++;util.puts("Benutzer oder Passswort falsch.");if(currentAuthErrors===MAX_AUTH_ERRORS){util.puts("Die Authentifizierung ist "+MAX_AUTH_ERRORS+" fehlgeschlagen.");return onAuthFail()}_getAuthUser()}})};var _checkAuthentication=function(user,password){user=encrypt(user);password=encrypt(password);return user===userHash&&password===passordHash};util.puts("Zum Starten der Anwendung müssen Sie sich authentifizieren");_getAuthUser()};var deleteUser=function(callback){util.puts("\n# ------------ Benutzer löschen ----------- #");var _deleteUser=function(username){var onSucess=function(user){user.remove(function(err){if(err){util.puts("Beim Löschen des Benutzers ist ein Fehler aufgetreten.")}else{util.puts(util.format('Der Benutzer "%s %s" wurde erfolgreich gelöscht.',user.firstName,user.lastName));if(callback){callback()}else{menu()}}})};var onFail=function(){listUsers()};getUser(username,onSucess,onFail)};var question="Welcher Benutzer soll entfernt werden?\n";listUsers(question,_deleteUser)};var encrypt=function(text){var i;for(i=0;i<100;i++){text=CryptoJS.SHA3(text).toString()}return text};var exit=function(){util.puts("\nAnwendung wird beendet.");rl.close();process.exit()};var getUser=function(username,onQuerySuccess,onQueryFail){User.findOne({username:username}).exec(function(err,user){if(err){util.puts("Beim Löschen des Benutzers ist ein Fehler aufgetreten.");menu()}else if(!user){util.puts("Der angegebene Benutzer konnte nicht gefundern werden.");onQueryFail()}else{onQuerySuccess(user)}})};var getUsers=function(callback){var query=User.find().select("username firstName lastName").sort("username");query.exec(function(err,users){if(err){util.puts("Beim Abrufen der Benutzer ist ein Fehler aufgetreten.");menu()}if(callback){callback(users)}})};var listAllUsers=function(callback){util.puts("\n# --------- Alle Benutzer anzeigen -------- #");listUsers(null,callback)};var listUsers=function(question,callback){util.puts("Registrierte Benutzer werden abgerufen.");var i,intervalId,userList=null;var _listUsers=function(){util.print("Bitte Warten: ");intervalId=setInterval(function(){util.print("#")},500);setTimeout(function(){getUsers(function(users){clearInterval(intervalId);util.puts("");userList=users;for(i=0;i<userList.length;i++){var user=userList[i];util.puts(util.format("[%s]: %s (%s %s)",i+1,user.username,user.firstName,user.lastName))}if(question){_askForUsername()}else if(callback){callback()}})},5e3)};var _askForUsername=function(){util.puts("[q]: Abbruch");rl.question(question,function(answer){if(answer.length===0){util.puts("Bitte geben Sie einen Benutzer an!")}else if(answer=="0"||answer>userList.length){util.puts("Bitte geben Sie einen gültigen Benutzer an!");_askForUsername()}else if(answer==="q"){menu()}else if(callback){var username=userList[answer-1].username;callback(username)}})};_listUsers()};var menu=function(callback){util.puts("\n# ------------------ Menu ----------------- #");util.puts("# [1]: Neuen Benutzer anlegen               #");util.puts("# [2]: Benutzer löschen                     #");util.puts("# [3]: Passwort eines Benutzers ändern      #");util.puts("# [4]: Alle Benutzer anzeigen               #");util.puts("# [5]: Beenden                              #");util.puts("# ----------------------------------------- #");rl.question("Was möchten Sie tun? ",function(answer){switch(answer){case"1":addUser(callback);break;case"2":deleteUser(callback);break;case"3":updateUserPassword(callback);break;case"4":listAllUsers(callback);break;case"5":exit();break;default:util.puts("Falsche Eingabe.");menu(callback);break}console.log("nach was tun")});console.log("nach ques")};var prepareDbConnection=function(environment,callback){Logger.info("UserManagement","prepareDbConnection","Initialize database connection.");var connectionUrl,db;if("production"===environment.toLowerCase()){Logger.info("UserManagement","prepareDbConnection",'Execution environment of server app: "Production".');connectionUrl=configDB.prod.url}else if("development"===environment.toLowerCase()){Logger.info("UserManagement","prepareDbConnection",'Execution environment of server app: "Development".');connectionUrl=configDB.dev.url}else{Logger.info("UserManagement","prepareDbConnection",'Execution environment of server app: "Test".');connectionUrl=configDB.test.url}Logger.info("UserManagement","prepareDbConnection","Application will user DB connection "+connectionUrl+".");mongoose.connect(connectionUrl);db=mongoose.connection;db.on("error",console.error.bind(console,"DB connection error:"));db.once("open",function(){callback()})};var registerUser=function(user,callback){var password=encrypt(user.password);User.register(user,password,function(err,account){if(err){util.puts(util.format("Bei der Registrierung des Benutzers ist ein Fehler aufgetreten. %s",err));menu()}else{util.puts(util.format('Benutzer "%s %s" wurde erfolgreich registriert',user.firstName,user.lastName));if(callback){callback()}}})};var setUserPassword=function(user,callback){function _getPassword(){rl.question("Passwort: ",function(password){if(password.length===0){util.puts("Bitte geben Sie ein Passwort ein.");_getPassword()}else{user.password=password;_getPasswordRepetition()}})}function _getPasswordRepetition(){rl.question("Passwort wiederholen: ",function(password){if(password.length===0){util.puts("Bitte geben Sie das Passwort erneut ein.");_getPasswordRepetition()}else if(password!==user.password){util.puts("Das angegeben Passwort und die Wiederholung waren nicht identisch. \n Bitte geben Sie erneut das Passwort ein.");_getPassword()}else{if(callback){callback(user)}}})}_getPassword()};var start=function(){var getDbConnectionForEnvironment=function(environment,callback){callback()};var showMenu=function(callback){menu(callback)};var getEnvironment=function(callback){var env=null;util.puts("\n# --------------- Umgebung --------------- #");util.puts("# Bitte geben Sie zunächst an, für welche   #");util.puts("# Umgebung die Benutzer bearbeitet werden   #");util.puts("# sollen:                                   #");util.puts("# [1]: Production                           #");util.puts("# [2]: Development                          #");util.puts("# [3]: Test                                 #");util.puts("# ----------------------------------------- #");rl.question("Bitte geben Sie die Umgebung an: ",function(environment){switch(environment){case"1":env="production";break;case"2":env="development";break;case"3":env="test";break;default:start();break}callback(env)})};var onAuthSucess=function(){getEnvironment(function(env){console.log("Env is"+env);getDbConnectionForEnvironment(env,function(){console.log("DB connection reday");showMenu(function(){console.log("callback of shoew menu")})})})};var onAuthFail=function(){exit()};util.puts("\n# ---------- User Management Tool --------- #");util.puts("#                                           #");util.puts("# Herzlich Willkomen zum User Management    #");util.puts('# Tool für "Was sollen wir futtern?         #');util.puts("#                                           #");util.puts("# ----------------------------------------- #");authenticate(onAuthSucess,onAuthFail)};var updateUserPassword=function(){util.puts("\n# ------------ Passwort ändern ------------ #");function _updatePassword(username){var onSucess=function(user){setUserPassword(user,function(user){user.save(function(err,savedUser){if(err){util.puts("Beim Speichern des neuen Passworts ist ein Fehler aufgetreten!");listUsers()}else{util.puts("Das Passwort wurde erfolgreich gespeichert.");menu()}})})};var onFail=function(){listUsers()};getUser(username,onSucess,onFail)}var question="Das Passwort welches Benutzers soll geändert werden?\n";listUsers(question,_updatePassword)};start();